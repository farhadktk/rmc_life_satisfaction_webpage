---
title: "Self-reported life satisfaction, 2011 to 2023"
subtitle: "Replicating the Our World in Data Grapher"
author: "Farhad Ali"
theme: united
---

<!-- Custom HTML and style to add logo and custom font [DO NOT EDIT THIS SECTION] -->

<img src="Our_World_in_Data_logo.png" style="position:absolute; top:0; right:0; padding:10px;" width="146"/>

<link href='https://fonts.googleapis.com/css?family=Playfair Display' rel='stylesheet'>

```{=html}
<style>
h1 {
    font-family: Playfair Display, Georgia, Times New Roman, "Liberation Serif", serif;
}
</style>
```

<!--- End of Custom HTML; Start of R Code --->

```{r include = F}
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)

# Load packages
if (!require(pacman)) install.packages("pacman")
pacman::p_load(plotly, tidyverse, reactable, here, scales)
```

```{r}
## Import data
cantril <-
    read_csv(here("data/happiness-cantril-ladder.csv")) %>%
    rename(Country = Entity)
```

### Happiness across the world over time

The World Happiness Report is a well-known source of cross-country data on self-reported life satisfaction, collected by the Gallup World Poll. The visualizations below present the ‚Äòhappiness scores‚Äô for each country.

The main life evaluation question asked in the poll is the Cantril Life Ladder question:

> ‚ÄúPlease imagine a ladder, with steps numbered from 0 at the bottom to 10 at the top. The top of the ladder represents the best possible life for you and the bottom of the ladder represents the worst possible life for you. On which step of the ladder would you say you personally feel you stand at this time?‚Äù


## üî¢ Table

**Average self-reported life satisfaction** ‚Äì Cantril Ladder score (0=worst; 10=best)

```{r}
# In this tab, you will create a table similar to the one on the Our World in Data page.
# The table should have the following columns:
# Country, `2011`, `2023`, Absolute change, and Relative change.

# You should:
# 1. Use `select` to drop the Code column from the `cantril` data as it is not needed in the table.
# 2. Filter the `cantril` data frame to just the years 2011 and 2023.
# 3. Use the `pivot_wider` function to create the columns for 2011 and 2023.
# (You may need backticks around column names with spaces or which start with numbers.)
# 4. Use the `mutate` function to calculate the Absolute change and Relative change.
# 5. Also with `mutate`, you should round your numbers to appropriate decimal places.
# 6. Then use scales::percent to format the Relative change as a percentage.
# 7. Use the `reactable` function to create and output the table.
# Load necessary libraries


# 1. Drop the Code column
cantril_clean <- cantril %>%
  select(-Code)

# 2. Filter for years 2011 and 2023
cantril_filtered <- cantril_clean %>%
  filter(Year %in% c(2011, 2023))

# 3. Pivot wider
cantril_wide <- cantril_filtered %>%
  pivot_wider(names_from = Year, values_from = `Cantril ladder score`)

# 4. Calculate Absolute and Relative change
cantril_final <- cantril_wide %>%
  mutate(
    `Absolute change` = round(`2023` - `2011`, 2),
    `Relative change` = round((`2023` - `2011`) / `2011`, 3)
  ) %>%
  # 5. Format Relative change as percentage
  mutate(`Relative change` = percent(`Relative change`))

# 6. Create interactive table
reactable(cantril_final)

```


## üåé Map

The map plots the average answer that survey respondents provided to this question in different countries. As with the steps of the ladder, values in the map range from 0 to 10.

```{r}
# This code is already done for you. You don't need to change anything here. If you change any of the column names, or something else with the data, you may need to adjust the code below.
# Create choropleth map
cantril %>%
    mutate(`Cantril ladder score` = round(`Cantril ladder score`, 2)) %>%
    plotly::plot_geo(width = 940) %>%
    add_trace(
        z = ~`Cantril ladder score`,
        color = ~`Cantril ladder score`,
        locations = ~Code,
        text = ~Country,
        frame = ~Year, colors = "YlGn"
    ) %>%
    colorbar(
        title = "Ladder Score",
        limits = c(min(cantril$`Cantril ladder score`), max(cantril$`Cantril ladder score`)),
        tickvals = seq(0, 10, by = 2),
        ticktext = seq(0, 10, by = 2)
    )
```


## üìà Simple Chart_Cantril score over time for a six countries

```{r}
# In this tab, create a simple line chart of the Cantril score over time for a few countries,
# similar to the one on the Our World in Data page.
# Note that your chart will not have the ability to filter countries like the one on the Our World in Data page.

# You should:
# 1. Filter the cantril data to just 4 to 8 countries you want to highlight
# 2. Use ggplot to create a line chart of the Cantril score over time, with different colors for each country
# 3. Use geom_line to create the lines
# 4. Use scale_y_continuous to set the y-axis limits to 0 and 10.
# 5. Use labs to create neat labels for the chart
# 6. Use theme_minimal to set the theme.
# 7. Finally, use ggplotly to convert the ggplot chart to a plotly chart

library(dplyr)
library(ggplot2)
library(plotly)

# 1. Filter to selected countries
selected_countries <- c("Pakistan", "India", "Bangladesh", "Nepal", "United States", "United Kingdom")

cantril_filtered <- cantril %>%
  filter(Country %in% selected_countries)

# 2. Create the ggplot
p <- ggplot(cantril_filtered, aes(x = Year, y = `Cantril ladder score`, color = Country)) +
  geom_line(size = 1.2) +
  scale_y_continuous(limits = c(0, 10)) +
  labs(
    title = "Cantril Ladder Score Over Time",
    x = "Year",
    y = "Ladder Score",
    color = "Country"
  ) +
  theme_minimal()

# 3. Convert to plotly
plotly::ggplotly(p)

# (When you're done with this section, don't forget to add tabsets, as mentioned in the instructions.)
```

## üìà Advanced Chart

One problem with the simple chart on the previous tab is that the countries are fixed. It would be better if the user could select the countries they want to see. This is not possible with `plotly` alone, but with the `crosstalk` package and some custom JavaScript, we can achieve this, as demonstrated below.

This is simply a demonstration for you, you do not need to work on this for your assignment. You may want to come back to this when you need such functionality in your own projects.

For more information on how we achieved this, see [this Stack Overflow question](https://stackoverflow.com/questions/67058016/how-to-set-default-values-in-filter-select-in-crosstalk-in-r-plotly).

## üìà Line Chart {.tabset}
```{r}
## üìà Line Chart {.tabset}
pacman::p_load(crosstalk, plotly)

# Filter the cantril data first
cantril_selected <- cantril %>%
  filter(Country %in% c("Afghanistan", "Brazil", "Pakistan", "Ukraine"))

# Crosstalk shared data object
shared_cantril_data <- highlight_key(cantril_selected)

# Create the plot
cantril_plotly <- plot_ly(
  shared_cantril_data,
  x = ~Year,
  y = ~`Cantril ladder score`,
  color = ~Country,
  type = "scatter",
  mode = "lines+markers"
) %>%
  layout(yaxis = list(range = c(0, 10)))

# Create the country filter
country_filter <- filter_select(
  "country_filter",
  "Select a country to examine",
  shared_cantril_data,
  ~Country,
  multiple = TRUE
)

# Output the filter and the plot
bscols(
  list(country_filter, cantril_plotly)
)


# Note that the default countries will only be set when you knit the document.
# Because it relies on the javascript snippet below, which is not rendered in the quarto preview.
```

<!-- CUSTOM JAVASCRIPT TO SET DEFAULT VALUES IN THE FILTER: -->
<script>
function filter_default() {
  var default_countries = ["Norway", "Australia", "Germany", "Bolivia", "Colombia", "Bhutan"]; // Set default countries here
  document.getElementById("country_filter").getElementsByClassName("selectized")[0].selectize.setValue(default_countries, false);
}
window.onload = filter_default;
</script>

## üìä Top and Bottom Countries {.tabset}
### Top and Bottom 10 Countries by Happiness Score
```{r}
# OPTIONAL CHALLENGE SECTION:

# Add a final tab with a single figure that shows the top 10 and bottom 10 countries by happiness score in 2023. Remember to add a ## header and include it in the tabsets
## üìä Top and Bottom Countries {.tabset}
### Top and Bottom 10 Countries by Happiness Score
# Filter data for 2023
cantril_2023 <- cantril %>%
  filter(Year == 2023) %>%
  drop_na(`Cantril ladder score`)

# Get Top 10 and Bottom 10 countries
top_bottom_10 <- cantril_2023 %>%
  arrange(desc(`Cantril ladder score`)) %>%
  slice(c(1:10, (n() - 9):n())) %>%
  mutate(
    Type = ifelse(row_number() <= 10, "Top 10", "Bottom 10")
  )

# Plot
top_bottom_plot <- ggplot(top_bottom_10, aes(x = reorder(Country, `Cantril ladder score`), y = `Cantril ladder score`, fill = Type)) +
  geom_col() +
  coord_flip() +
  scale_y_continuous(limits = c(0, 10)) +
  labs(
    title = "Top 10 and Bottom 10 Countries by Happiness Score (2023)",
    x = "Country",
    y = "Happiness Score"
  ) +
  theme_minimal() +
  scale_fill_manual(values = c("Top 10" = "steelblue", "Bottom 10" = "salmon"))

# Display the plot
top_bottom_plot



```


# {.unlisted}

Data source: World Happiness Report

[OurWorldInData.org/happiness-and-life-satisfaction](https://ourworldindata.org/grapher/happiness-cantril-ladder) | CC BY
